// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// DO NOT EDIT: generated by unioffice ECMA-376 generator
//
// Use of this software package and source code is governed by the terms of the
// UniDoc End User License Agreement (EULA) that is available at:
// https://unidoc.io/eula/
// A trial license code for evaluation can be obtained at https://unidoc.io website.

package chart

import (
	"encoding/xml"
	"fmt"

	"github.com/unidoc/unioffice"
)

type CT_PivotFmts struct {
	PivotFmt []*CT_PivotFmt
}

func NewCT_PivotFmts() *CT_PivotFmts {
	ret := &CT_PivotFmts{}
	return ret
}

func (m *CT_PivotFmts) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(start)
	if m.PivotFmt != nil {
		sepivotFmt := xml.StartElement{Name: xml.Name{Local: "c:pivotFmt"}}
		for _, c := range m.PivotFmt {
			e.EncodeElement(c, sepivotFmt)
		}
	}
	e.EncodeToken(xml.EndElement{Name: start.Name})
	return nil
}

func (m *CT_PivotFmts) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	// initialize to default
lCT_PivotFmts:
	for {
		tok, err := d.Token()
		if err != nil {
			return err
		}
		switch el := tok.(type) {
		case xml.StartElement:
			switch el.Name {
			case xml.Name{Space: "http://schemas.openxmlformats.org/drawingml/2006/chart", Local: "pivotFmt"},
				xml.Name{Space: "http://purl.oclc.org/ooxml/drawingml/chart", Local: "pivotFmt"}:
				tmp := NewCT_PivotFmt()
				if err := d.DecodeElement(tmp, &el); err != nil {
					return err
				}
				m.PivotFmt = append(m.PivotFmt, tmp)
			default:
				unioffice.Log("skipping unsupported element on CT_PivotFmts %v", el.Name)
				if err := d.Skip(); err != nil {
					return err
				}
			}
		case xml.EndElement:
			break lCT_PivotFmts
		case xml.CharData:
		}
	}
	return nil
}

// Validate validates the CT_PivotFmts and its children
func (m *CT_PivotFmts) Validate() error {
	return m.ValidateWithPath("CT_PivotFmts")
}

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (m *CT_PivotFmts) ValidateWithPath(path string) error {
	for i, v := range m.PivotFmt {
		if err := v.ValidateWithPath(fmt.Sprintf("%s/PivotFmt[%d]", path, i)); err != nil {
			return err
		}
	}
	return nil
}
